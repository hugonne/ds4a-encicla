@using Microsoft.AspNetCore.Routing
@model StationDetails

@{
    ViewData["Title"] = "Station Details";
    var currentDate = string.IsNullOrEmpty(Context.Request.Query["date"]) ?
        DateTime.Today :
        Convert.ToDateTime(Context.Request.Query["date"]);
    var stationId = Context.GetRouteData().Values["id"];
}
<h1>
    <i class="fas fa-charging-station text-info"></i>
    @ViewData["Title"]
</h1>

@if (Model != null)
{
    string iconClass;
    if (Model.Station.CurrentAvailability < 0.1)
    {
        iconClass = "fas fa-thumbs-down text-dark";
    }
    else if (Model.Station.CurrentAvailability < 0.33)
    {
        iconClass = "fas fa-thumbs-down text-danger";
    }
    else if (Model.Station.CurrentAvailability < 0.66)
    {
        iconClass = "fas fa-thumbs-up text-warning";
    }
    else
    {
        iconClass = "fas fa-thumbs-up text-success";
    }

    <div class="form-group">
        <label>Select a Date")</label>
        <input id="selectedDate" type="date" class="form-control" value="@currentDate.ToString("yyyy-MM-dd")"/>
    </div>

    <div class="row">
        <div class="col-md-9">
            <h3>
                <i class="fas fa-biking text-primary"></i>
                @Model.Station.Name
            </h3>
            <div class="row">
                <div class="col-md-5">
                    <strong class="text-info">Zone:</strong>
                </div>
                <div class="col-md-7">
                    <i class="fas fa-search-location"></i>
                    @Model.Station.Zone?.Name
                </div>
                <div class="col-md-5">
                    <strong class="text-info">Capacity:</strong>
                </div>
                <div class="col-md-7">
                    <i class="fas fa-bicycle"></i>
                    @Model.Station.Capacity
                </div>
                @if (currentDate == DateTime.Today)
                {
                    <div class="col-md-5">
                        <strong class="text-secondary">Weather:</strong>
                    </div>
                    <div class="col-md-7">
                        <i class="fas fa-cloud-showers-heavy text-primary"></i>
                        @*TODO: Calculate weather for day*@
                        Rainy
                    </div>
                    <div class="col-md-5">
                        <strong class="text-secondary">Current Availability:</strong>
                    </div>
                    <div class="col-md-7">
                        <i class="@iconClass"></i>
                        @Math.Round(Model.Station.CurrentAvailability * 100)% (@Model.Station.CurrentBikes bicycles)
                    </div>
                    <div class="col-md-5">
                        <strong class="text-secondary">Availability in Next 10 Mins.:</strong>
                    </div>
                    <div class="col-md-7">
                        @if (Model.Station.PredictedBikes == -1)
                        {
                            <span>Prediction in progress...</span>
                        }
                        else
                        {
                            <i class="@iconClass"></i>
                            <span>@Math.Round(Model.Station.PredictedAvailability * 100)% (@Model.Station.PredictedBikes bicycles)</span>
                        }
                    </div>
                }
            </div>
        </div>
        <div class="col-md-3">
            <img src="@Model.Station.Picture" class="img-fluid"/>
        </div>
    </div>
    <div class="chart" id="bargraph"></div>
    <div class="chart" id="heatmapgraph"></div>
    <button class="btn btn-warning" onclick="window.history.back()">
        <i class="fas fa-arrow-left"></i>
        Go Back
    </button>
}
else
{
    <div class="form-group">
        <label>Select a Station</label>
        <select id="stationList" class="form-control" asp-items="@(ViewData["StationList"] as SelectList)">
            <option>Select a Station...</option>
        </select>
    </div>
}

@section Scripts {
    @if (Model != null)
    {
        <script>
            var capacityTrace = @Html.Raw(Model.DailyCapacityJson);
            var predictionsTrace = @Html.Raw(Model.DailyPredictionsJson);
            var hourlyAverageTrace = @Html.Raw(Model.HourlyAverage);
            var lineChartData = [capacityTrace, predictionsTrace];
            var heatMapData = [hourlyAverageTrace];
            var lineLayout = {
                title: 'Bicycle Availability for @currentDate.ToLongDateString()',
                xaxis: {
                    title: 'Time'
                },
                yaxis: {
                    title: 'Bicycle Count'
                    //range: [0, 20]
                }
            };
            var heatLayout = {
                title: 'Average Inventory By Hour/Day',
                xaxis: {
                    title: 'Days'
                },
                yaxis: {
                    title: 'Hours'
                }
            };
            Plotly.plot('bargraph', lineChartData, lineLayout);
            Plotly.newPlot('heatmapgraph', heatMapData, heatLayout);

            $("#selectedDate").change(function () {
                window.location.href = "/Home/Stations/" + @stationId + "?date=" + this.value;
            });
        </script>
    }
    else
    {
        <script>
            $("#stationList").change(function () {
                window.location.href = "/Home/Stations/" + this.value;
            });
        </script>
    }
}
